================================================================================
binary expression
================================================================================

1 ** 2 + 2 * 3

--------------------------------------------------------------------------------

(module
  (binary_operator
    (binary_operator
      (integer)
      (integer))
    (binary_operator
      (integer)
      (integer))))

================================================================================
unary expression
================================================================================

~1

--------------------------------------------------------------------------------

(module
  (unary_operator
    (integer)))

================================================================================
slice expression
================================================================================

"abc"[1:2]

--------------------------------------------------------------------------------

(module
  (subscript
    (string
      (string_start)
      (string_content)
      (string_end))
    (slice
      (integer)
      (integer))))

================================================================================
conditional expression
================================================================================

x = True if enabled else False

--------------------------------------------------------------------------------

(module
  (assignment
    (dotted_name
      (identifier))
    (conditional_expression
      (true)
      (identifier)
      (false))))

================================================================================
function invocation
================================================================================

print("hello world", end="")

--------------------------------------------------------------------------------

(module
  (call
    (identifier)
    (argument_list
      (string
        (string_start)
        (string_content)
        (string_end))
      (keyword_argument
        (identifier)
        (string
          (string_start)
          (string_end))))))

================================================================================
Comprehensions
================================================================================

[x * x for x in range(5)] 

--------------------------------------------------------------------------------

(module
      (list_comprehension
        (binary_operator
          (identifier)
          (identifier))
        (for_in_clause
          (identifier)
          (call
            (identifier)
            (argument_list
              (integer))))))

================================================================================
selector expression
================================================================================

myDict = {key = "value"}
result = myDict.key

--------------------------------------------------------------------------------

(module
      (assignment
        (dotted_name
          (identifier))
        (dictionary
          (pair
            (identifier)
            (string
              (string_start)
              (string_content)
              (string_end)))))
      (ERROR
        (dotted_name
          (identifier))
        (dotted_name
          (identifier)
          (identifier))))

================================================================================
selector expression with ? operator
================================================================================

data = {key = "value"}
a = data?.key     
b = data?.name

--------------------------------------------------------------------------------

(module
      (assignment
        (dotted_name
          (identifier))
        (dictionary
          (pair
            (identifier)
            (string
              (string_start)
              (string_content)
              (string_end)))))
      (ERROR
        (dotted_name
          (identifier))
        (dotted_name
          (identifier)
          (ERROR
            (UNEXPECTED '?'))
          (identifier)
          (ERROR
            (identifier)
            (identifier)
            (UNEXPECTED '?'))
          (identifier))))

================================================================================
quantifier map expression
================================================================================

b = map k, v in {a = "foo", b = "bar"} { v } 

--------------------------------------------------------------------------------

(module
      (assignment
        (dotted_name
          (identifier))
        (comparison_operator
          (identifier)
          (ERROR
            (identifier)
            (identifier))
          (dictionary
            (pair
              (identifier)
              (string
                (string_start)
                (string_content)
                (string_end)))
            (pair
              (identifier)
              (string
                (string_start)
                (string_content)
                (string_end))))))
      (MISSING _newline)
      (dictionary
        (ERROR
          (identifier))))

================================================================================
quantifier filter expression
================================================================================

d = filter _, v in {a = "foo", b = "bar"} {v == "foo"}

--------------------------------------------------------------------------------

(module
      (assignment
        (dotted_name
          (identifier))
        (comparison_operator
          (identifier)
          (ERROR
            (identifier)
            (identifier))
          (dictionary
            (pair
              (identifier)
              (string
                (string_start)
                (string_content)
                (string_end)))
            (pair
              (identifier)
              (string
                (string_start)
                (string_content)
                (string_end))))))
      (MISSING _newline)
      (dictionary
        (ERROR
          (comparison_operator
            (identifier)
            (string
              (string_start)
              (string_content)
              (string_end))))))

================================================================================
attribute expression
================================================================================

schema Person:
  name: str

person = Person {name: "Alice"}
name1 = person.name

--------------------------------------------------------------------------------

(module
  (schema_statement
        (identifier)
        (ERROR
          (dotted_name
            (identifier))
          (type
            (basic_type)))
        (block))
      (assignment
        (dotted_name
          (identifier))
        (schema_expr
          (dotted_name
            (identifier))
          (dictionary
            (pair
              (identifier)
              (string
                (string_start)
                (string_content)
                (string_end))))))
      (ERROR
        (dotted_name
          (identifier))
        (dotted_name
        (identifier)
        (identifier))))

================================================================================
optional attribute expression
================================================================================

schema Person:
  name: str

person = Person {name: "Alice"}
name2 = person?.name

--------------------------------------------------------------------------------

(module
      (schema_statement
        (identifier)
        (ERROR
          (dotted_name
            (identifier))
          (type
            (basic_type)))
        (block))
      (assignment
        (dotted_name
          (identifier))
        (schema_expr
          (dotted_name
            (identifier))
          (dictionary
            (pair
              (identifier)
              (string
                (string_start)
                (string_content)
                (string_end))))))
      (ERROR
        (dotted_name
          (identifier))
        (dotted_name
          (identifier)
          (ERROR
            (UNEXPECTED '?'))
            (identifier))))

================================================================================
optional item expression
================================================================================

datalist = [[1], 2, 3]
item = datalist?[0]?

--------------------------------------------------------------------------------

(module
      (assignment
        (dotted_name
          (identifier))
        (list
          (list
            (integer))
          (integer)
          (integer)))
      (ERROR
        (assignment
          (dotted_name
            (identifier))
          (subscript
            (identifier)
            (ERROR
              (UNEXPECTED '?'))
            (integer)))
        (UNEXPECTED '?')))

================================================================================
null coalesce expression
================================================================================

data = {"name": {"key": "value"}}
name3 = data?["name"]?["err_key"]?.lower() or "name3_value"

--------------------------------------------------------------------------------

(module
      (assignment
        (dotted_name
          (identifier))
        (dictionary
          (pair
            (string
              (string_start)
              (string_content)
              (string_end))
            (dictionary
              (pair
                (string
                  (string_start)
                  (string_content)
                  (string_end))
                (string
                  (string_start)
                  (string_content)
                  (string_end)))))))
      (assignment
        (dotted_name
          (identifier))
        (boolean_operator
          (call
            (attribute
              (subscript
                (subscript
                  (identifier)
                  (ERROR
                    (UNEXPECTED '?'))
                  (string
                    (string_start)
                    (string_content)
                    (string_end)))
                (ERROR
                  (UNEXPECTED '?'))
                (string
                  (string_start)
                  (string_content)
                  (string_end)))
              (ERROR
                (UNEXPECTED '?'))
                (identifier))
            (argument_list))
            (string
            (string_start)
            (string_content)
            (string_end)))))

================================================================================
paren expression
================================================================================

(a + b) * c

--------------------------------------------------------------------------------

(module
  (binary_operator
    (paren_expression
      (binary_operator
        (identifier)
        (identifier)))
    (identifier)))

================================================================================
boolean expression with 'and' operator
================================================================================

x = True and False

--------------------------------------------------------------------------------

(module
  (assignment
    (dotted_name
      (identifier))
    (boolean_operator
      (true)
      (false))))

================================================================================
boolean expression with 'or' operator
================================================================================

y = True or False

--------------------------------------------------------------------------------

(module
  (assignment
    (dotted_name
      (identifier))
    (boolean_operator
      (true)
      (false))))

================================================================================
not operator with boolean expression
================================================================================

x = not True

--------------------------------------------------------------------------------

(module
  (assignment
    (dotted_name
      (identifier))
    (not_operator
      (true))))

================================================================================
not operator with comparison expression
================================================================================

y = not (1 == 2)

--------------------------------------------------------------------------------

(module
  (assignment
    (dotted_name
      (identifier))
    (not_operator
      (paren_expression
        (comparison_operator
          (integer)
          (integer))))))

================================================================================
lambda expression 
================================================================================

g = lambda x: str(x) -> int: x * 2

--------------------------------------------------------------------------------

(module
  (ERROR
    (dotted_name
      (identifier))
    (ERROR
      (identifier))
    (parameters
          (identifier))
        (type
          (basic_type))
        (identifier)
        (integer)))

================================================================================
Comparison operators
================================================================================

a = 5 < 10
b = "apple" == "orange"
c = 3.14 > 3.14
d = "hello" != "world"
e = 10 <= 20
f = 7 >= 7
g = x in [1, 2, 3]
h = y not in ["a", "b", "c"]
i = x is None
j = y is not None

--------------------------------------------------------------------------------

(module
  (assignment
    (dotted_name
      (identifier))
    (comparison_operator
          (integer)
          (integer)))
      (assignment
        (dotted_name
          (identifier))
        (comparison_operator
          (string
            (string_start)
            (string_content)
            (string_end))
          (string
            (string_start)
            (string_content)
            (string_end))))
      (assignment
        (dotted_name
          (identifier))
        (comparison_operator
          (float)
          (float)))
      (assignment
        (dotted_name
          (identifier))
          (comparison_operator
          (string
            (string_start)
            (string_content)
            (string_end))
          (string
            (string_start)
            (string_content)
            (string_end))))
      (assignment
        (dotted_name
          (identifier))
      (comparison_operator
          (integer)
          (integer)))
      (assignment
        (dotted_name
          (identifier))
      (comparison_operator
          (integer)
          (integer)))
      (assignment
        (dotted_name
          (identifier))
      (comparison_operator
          (identifier)
          (list
            (integer)
            (integer)
            (integer))))
      (assignment
        (dotted_name
          (identifier))
      (comparison_operator
          (identifier)
          (list
            (string
              (string_start)
              (string_content)
              (string_end))
            (string
              (string_start)
              (string_content)
              (string_end))
            (string
              (string_start)
              (string_content)
              (string_end)))))
      (assignment
        (dotted_name
          (identifier))
        (comparison_operator
          (identifier)
          (none)))
      (assignment
        (dotted_name
          (identifier))
        (comparison_operator
          (identifier)
          (none))))